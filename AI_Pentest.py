import speech_recognition as sr
import pyttsx3
import socket
import requests
import paramiko
import re
import ssl
import json
import threading
import time
import subprocess
from scapy.all import sniff, IP, TCP  # Requires root/admin
from urllib.parse import urlparse

# Initialize speech engine
engine = pyttsx3.init()
engine.setProperty('rate', 150)

def speak(text):
    print("[AI]:", text)
    engine.say(text)
    engine.runAndWait()

def listen():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        speak("Listening for your command...")
        audio = r.listen(source)
    try:
        command = r.recognize_google(audio)
        print("[You]:", command)
        return command.lower()
    except sr.UnknownValueError:
        speak("Sorry, I did not understand that.")
        return ""
    except sr.RequestError:
        speak("Speech service is unavailable.")
        return ""

# --- Pentesting functions ---

def port_scan(target, ports=[21,22,23,25,53,80,110,143,443,445,3389]):
    open_ports = []
    speak(f"Starting port scan on {target}")
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        result = sock.connect_ex((target, port))
        sock.close()
        if result == 0:
            open_ports.append(port)
    if open_ports:
        speak(f"Open ports on {target} are: {', '.join(map(str, open_ports))}")
    else:
        speak(f"No common ports are open on {target}")

def header_check(url):
    speak(f"Checking headers for {url}")
    try:
        r = requests.head(url, timeout=5)
        headers = r.headers
        vulns = []
        if "X-Frame-Options" not in headers:
            vulns.append("Missing X-Frame-Options header (Clickjacking risk)")
        if "Content-Security-Policy" not in headers:
            vulns.append("Missing Content-Security-Policy header (XSS risk)")
        speak(f"Headers found: {', '.join(headers.keys())}")
        if vulns:
            speak("Potential vulnerabilities detected: " + "; ".join(vulns))
        else:
            speak("No common header vulnerabilities detected.")
    except Exception as e:
        speak(f"Failed to check headers: {e}")

def ssh_bruteforce(target, username, passwords):
    speak(f"Starting SSH brute force on {target} with username {username}")
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    for pw in passwords:
        try:
            client.connect(target, username=username, password=pw, timeout=3)
            client.close()
            speak(f"Password found: {pw}")
            return
        except:
            continue
    speak("No password matched.")

def web_scan(url):
    speak(f"Scanning website {url}")
    try:
        r = requests.get(url, timeout=5)
        speak(f"Website responded with status code {r.status_code} and content length {len(r.content)}")
    except Exception as e:
        speak(f"Failed to scan website: {e}")

def buffer_overflow_sim():
    speak("Simulating buffer overflow attack. No real exploit performed.")

def packet_sniffer(duration=10):
    speak("Starting packet sniffer for 10 seconds. Requires root privileges.")
    packets = []

    def pkt_callback(pkt):
        if IP in pkt and TCP in pkt:
            packets.append(pkt)
            print(f"Packet: {pkt[IP].src} -> {pkt[IP].dst} TCP port {pkt[TCP].dport}")

    sniff_thread = threading.Thread(target=sniff, kwargs={'prn': pkt_callback, 'timeout': duration})
    sniff_thread.start()
    sniff_thread.join()
    speak(f"Captured {len(packets)} TCP packets in {duration} seconds.")

def fuzzer(url, param, payloads):
    speak(f"Starting fuzzer on {url} parameter {param}")
    results = {}
    for payload in payloads:
        try:
            r = requests.get(url, params={param: payload}, timeout=5)
            results[payload] = r.status_code
        except:
            results[payload] = "error"
    for p, code in results.items():
        speak(f"Payload {p} returned status code {code}")

def post_exploitation_checker():
    speak("Running post exploitation checks. This is a simulation.")

def js_payload_xss():
    payload = "<script>alert('XSS')</script>"
    speak(f"Generated JS XSS payload: {payload}")

def url_scan(url):
    speak(f"Scanning URL {url}")
    try:
        r = requests.get(url, timeout=5)
        speak(f"URL responded with status code {r.status_code}")
    except Exception as e:
        speak(f"Failed to scan URL: {e}")

def subdomain_enumeration(domain):
    speak(f"Enumerating subdomains for {domain}")
    try:
        url = f"https://crt.sh/?q=%25.{domain}&output=json"
        r = requests.get(url, timeout=10)
        data = r.json()
        subdomains = set()
        for entry in data:
            names = entry.get("name_value", "")
            for name in names.split("\n"):
                if domain in name:
                    subdomains.add(name.strip())
        if subdomains:
            speak(f"Found subdomains: {', '.join(list(subdomains)[:10])} and more.")
        else:
            speak("No subdomains found.")
    except Exception as e:
        speak(f"Failed to enumerate subdomains: {e}")

def directory_bruteforce(url, wordlist):
    speak(f"Starting directory brute force on {url}")
    found = []
    for word in wordlist:
        try:
            full_url = url.rstrip("/") + "/" + word
            r = requests.get(full_url, timeout=3)
            if r.status_code == 200:
                found.append(full_url)
        except:
            pass
    if found:
        speak(f"Found directories: {', '.join(found)}")
    else:
        speak("No directories found.")

def password_strength_checker(password):
    score = 0
    if len(password) >= 8:
        score += 1
    if re.search(r"\d", password):
        score += 1
    if re.search(r"[A-Z]", password):
        score += 1
    if re.search(r"[^a-zA-Z0-9]", password):
        score += 1
    strength = ["Very Weak", "Weak", "Moderate", "Strong", "Very Strong"]
    speak(f"Password strength is {strength[score]}")

def ssl_tls_check(host):
    speak(f"Checking SSL/TLS configuration for {host}")
    try:
        context = ssl.create_default_context()
        with socket.create_connection((host, 443), timeout=5) as sock:
            with context.wrap_socket(sock, server_hostname=host) as ssock:
                cert = ssock.getpeercert()
                issuer = dict(x[0] for x in cert.get('issuer'))
                subject = dict(x[0] for x in cert.get('subject'))
                speak(f"Certificate issued to {subject.get('commonName', 'unknown')}, issued by {issuer.get('commonName', 'unknown')}")
    except Exception as e:
        speak(f"Failed SSL/TLS check: {e}")

def osint_email_lookup(email):
    speak(f"Looking up OSINT info for {email}")
    breaches = ["ExampleBreach1", "ExampleBreach2"]
    speak(f"Email {email} found in breaches: {', '.join(breaches)}")

# Extra commands

def nmap_scan(target, options=""):
    speak(f"Running Nmap scan on {target} with options {options}")
    try:
        cmd = f"nmap {options} {target}"
        result = subprocess.run(cmd.split(), capture_output=True, text=True, timeout=60)
        output = result.stdout
        # Speak first 300 chars to avoid overload
        speak("Nmap scan results: " + output[:300])
    except Exception as e:
        speak(f"Nmap scan failed: {e}")

def whois_lookup(domain):
    speak(f"Performing WHOIS lookup for {domain}")
    try:
        result = subprocess.run(["whois", domain], capture_output=True, text=True, timeout=20)
        output = result.stdout
        speak("WHOIS data: " + output[:300])
    except Exception as e:
        speak(f"WHOIS lookup failed: {e}")

def dns_lookup(domain):
    speak(f"Performing DNS lookup for {domain}")
    try:
        ips = socket.gethostbyname_ex(domain)[2]
        speak(f"DNS lookup found IPs: {', '.join(ips)}")
    except Exception as e:
        speak(f"DNS lookup failed: {e}")

def sql_injection_test(url, param):
    speak(f"Testing SQL injection on {url} parameter {param}")
    payload = "' OR '1'='1"
    try:
        r = requests.get(url, params={param: payload}, timeout=5)
        if "sql" in r.text.lower() or "syntax" in r.text.lower():
            speak("Potential SQL injection vulnerability detected.")
        else:
            speak("No SQL injection vulnerability detected.")
    except Exception as e:
        speak(f"SQL injection test failed: {e}")

def ping_sweep(network_prefix):
    speak(f"Starting ping sweep on {network_prefix}.0/24")
    alive_hosts = []
    for i in range(1, 255):
        ip = f"{network_prefix}.{i}"
        result = subprocess.run(["ping", "-c", "1", "-W", "1", ip], stdout=subprocess.DEVNULL)
        if result.returncode == 0:
            alive_hosts.append(ip)
    if alive_hosts:
        speak(f"Alive hosts: {', '.join(alive_hosts[:10])} and more.")
    else:
        speak("No alive hosts found.")

# --- Help function ---

def help_command():
    examples = [
        "Port scan 192.168.1.1",
        "Header check http://example.com",
        "SSH brute force 192.168.1.10 username root passwords pass1,pass2",
        "Web scan http://example.com",
        "Buffer overflow",
        "Packet sniffer",
        "Fuzzer http://example.com param1 test,admin",
        "Post exploitation",
        "JS payload",
        "URL scan http://example.com",
        "Subdomain enumeration example.com",
        "Directory brute force http://example.com admin login",
        "Password strength MyPass123!",
        "SSL check example.com",
        "OSINT email test@example.com",
        "Nmap scan 192.168.1.1 -sS -p 1-1000",
        "Whois lookup example.com",
        "DNS lookup example.com",
        "SQL injection test http://example.com param1",
        "Ping sweep 192.168.1"
    ]
    speak("Here are some example commands you can say:")
    for ex in examples:
        speak(ex)

# --- Command dispatcher with improved parsing ---

def handle_command(command):
    if any(x in command for x in ["help", "commands", "example"]):
        help_command()
    elif "port scan" in command:
        m = re.search(r"port scan (\S+)", command)
        if m:
            target = m.group(1)
            port_scan(target)
        else:
            speak("Please specify the target IP for port scan.")
    elif "header check" in command:
        m = re.search(r"header check (\S+)", command)
        if m:
            header_check(m.group(1))
        else:
            speak("Please specify the URL for header check.")
    elif "ssh brute force" in command:
        m = re.search(r"ssh brute force (\S+) username (\S+) passwords (.+)", command)
        if m:
            target, username, pw_str = m.groups()
            passwords = pw_str.split(",")
            ssh_bruteforce(target, username, passwords)
        else:
            speak("Please specify target, username, and passwords separated by commas.")
    elif "web scan" in command:
        m = re.search(r"web scan (\S+)", command)
        if m:
            web_scan(m.group(1))
        else:
            speak("Please specify the URL for web scan.")
    elif "buffer overflow" in command:
        buffer_overflow_sim()
    elif "packet sniffer" in command:
        packet_sniffer()
    elif "fuzzer" in command:
        m = re.search(r"fuzzer (\S+) (\S+) (.+)", command)
        if m:
            url, param, payloads = m.groups()
            fuzzer(url, param, payloads.split(","))
        else:
            speak("Please specify url, parameter, and payloads separated by commas.")
    elif "post exploitation" in command:
        post_exploitation_checker()
    elif "js payload" in command:
        js_payload_xss()
    elif "url scan" in command:
        m = re.search(r"url scan (\S+)", command)
        if m:
            url_scan(m.group(1))
        else:
            speak("Please specify the URL for url scan.")
    elif "subdomain enumeration" in command:
        m = re.search(r"subdomain enumeration (\S+)", command)
        if m:
            subdomain_enumeration(m.group(1))
        else:
            speak("Please specify the domain for subdomain enumeration.")
    elif "directory brute force" in command:
        m = re.search(r"directory brute force (\S+) (.+)", command)
        if m:
            url = m.group(1)
            wordlist = m.group(2).split()
            directory_bruteforce(url, wordlist)
        else:
            speak("Please specify url and wordlist separated by spaces.")
    elif "password strength" in command:
        m = re.search(r"password strength (.+)", command)
        if m:
            password_strength_checker(m.group(1))
        else:
            speak("Please specify the password to check.")
    elif "ssl check" in command:
        m = re.search(r"ssl check (\S+)", command)
        if m:
            ssl_tls_check(m.group(1))
        else:
            speak("Please specify the host for SSL check.")
    elif "osint email" in command:
        m = re.search(r"osint email (\S+)", command)
        if m:
            osint_email_lookup(m.group(1))
        else:
            speak("Please specify the email for OSINT lookup.")
    elif "nmap scan" in command:
        m = re.search(r"nmap scan (\S+)(.*)", command)
        if m:
            target = m.group(1)
            options = m.group(2).strip()
            nmap_scan(target, options)
        else:
            speak("Please specify the target for Nmap scan.")
    elif "whois lookup" in command:
        m = re.search(r"whois lookup (\S+)", command)
        if m:
            whois_lookup(m.group(1))
        else:
            speak("Please specify the domain for WHOIS lookup.")
    elif "dns lookup" in command:
        m = re.search(r"dns lookup (\S+)", command)
        if m:
            dns_lookup(m.group(1))
        else:
            speak("Please specify the domain for DNS lookup.")
    elif "sql injection test" in command:
        m = re.search(r"sql injection test (\S+) (\S+)", command)
        if m:
            sql_injection_test(m.group(1), m.group(2))
        else:
            speak("Please specify the URL and parameter for SQL injection test.")
    elif "ping sweep" in command:
        m = re.search(r"ping sweep (\S+)", command)
        if m:
            ping_sweep(m.group(1))
        else:
            speak("Please specify the network prefix for ping sweep.")
    elif "exit" in command or "quit" in command:
        speak("Goodbye!")
        exit(0)
    else:
        speak("Command not recognized. Say help to hear example commands.")

def main():
    speak("Welcome to Satan AI pentesting assistant. Say help to get started.")
    while True:
        command = listen()
        if command:
            handle_command(command)
        time.sleep(1)

if __name__ == "__main__":
    main()
